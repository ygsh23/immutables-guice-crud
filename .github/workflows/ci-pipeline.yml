name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: [self-hosted, windows, windows-runner]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set PowerShell execution policy to allow scripts
        run: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force

      - name: Build project
        run: mvn clean install

      - name: Upload target directory
        uses: actions/upload-artifact@v3
        with:
          name: target
          path: target/

  sonar_scan:
    runs-on: [self-hosted, windows, windows-runner]
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download target directory
        uses: actions/download-artifact@v3
        with:
          name: target
          path: target/

      - name: Run SonarQube analysis
        run: mvn sonar:sonar

      - name: Fetch SonarQube report
        run: |
          curl.exe -u "sqa_b785980520b33df3a858c4828e77c90a8ad5484e:" -X GET "http://localhost:9000/api/issues/search?componentKeys=com.example&ps=500" -o sonar_report.json
          curl.exe -u "sqa_b785980520b33df3a858c4828e77c90a8ad5484e:" -X GET "http://localhost:9000/api/qualitygates/project_status?projectKey=com.example" -o quality_gate_status.json

      - name: Upload SonarQube reports
        uses: actions/upload-artifact@v3
        with:
          name: sonar-reports
          path: |
            sonar_report.json
            quality_gate_status.json

  sam_local_invoke:
    runs-on: [self-hosted, windows, windows-runner]
    needs: sonar_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Set up AWS SAM
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Verify Docker installation
        run: docker --version

      - name: Download target directory
        uses: actions/download-artifact@v3
        with:
          name: target
          path: target/

      - name: Invoke Lambda function locally using SAM
        run: |
          # Run SAM local invoke and capture output
          sam local invoke UserLambda --event event.json > result.txt

          # Check if SAM invocation failed (non-zero exit code)
          if ($?) {
            # No error
            echo "Lambda invoked successfully."
          } else {
            # Exit with code 1 if SAM invocation fails
            echo "Error: Lambda invocation failed."
            exit 1
          }

          # Optional: If you want to log the result for debugging
          Get-Content result.txt

          # Check if result contains any error message
          if (Get-Content result.txt | Select-String -Pattern "Error") {
            echo "Error occurred during Lambda invocation"
            exit 1  # Exit code 1 for failure
          }